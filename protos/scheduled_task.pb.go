// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: scheduled_task.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateScheduledTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Required field
	// Version information for the task envelope.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Required field
	// Unique identifier of the service requesting the task to be scheduled.
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Required field
	// The unique identifiers of the devices to which the task needs to be
	// dispatched.
	DeviceIds []string `protobuf:"bytes,3,rep,name=device_ids,json=deviceIds,proto3" json:"device_ids,omitempty"`
	// Optional field
	// The consignment ID is a unique identifier assigned by the requesting service
	// (service_id) for this task request. After submitting the scheduled task
	// request to the scheduler, the service can subsequently query for status
	// updates using this consignment ID.
	// This consignment ID is also used by the scheduler when logging activities
	// performed to service the scheduled task request. The consignment ID can be
	// used for end-to-end correlation and forensics for the request.
	ConsignmentId string `protobuf:"bytes,4,opt,name=consignment_id,json=consignmentId,proto3" json:"consignment_id,omitempty"`
	// Required field
	// The tenant to which the devices specified in 'device_ids' belongs. All
	// devices specified in a single TaskRequestEnvelope using the device_ids
	// field MUST belong to the same tenant.
	TenantId string `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Optional field
	// The requested schedule for the task. If not specified, the task will be
	// scheduled immediately (i.e. 'now').
	Schedule string `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// An identifier assigned to the message sent to the device. This field is not
	// interpreted by the scheduler in any way and is passed on to the device. The
	// device returns this message_id back when responding to the cloud service.
	// This allows 'conversations' between the device management service and the
	// device as a way to keep messages belonging to a logical conversation together.
	MessageId string `protobuf:"bytes,7,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Required field
	// The type of message contained within the payload. This is not interpreted
	// by the scheduler and is meant for consumption by the service initiating the
	// task request and the target device.
	MessageType string `protobuf:"bytes,8,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// Required field
	// The payload to be delivered to the target device. The payload is opaque
	// to the scheduler and is not interpreted in any way.
	Payload []byte `protobuf:"bytes,9,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CreateScheduledTaskRequest) Reset() {
	*x = CreateScheduledTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduled_task_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduledTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduledTaskRequest) ProtoMessage() {}

func (x *CreateScheduledTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_scheduled_task_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduledTaskRequest.ProtoReflect.Descriptor instead.
func (*CreateScheduledTaskRequest) Descriptor() ([]byte, []int) {
	return file_scheduled_task_proto_rawDescGZIP(), []int{0}
}

func (x *CreateScheduledTaskRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CreateScheduledTaskRequest) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *CreateScheduledTaskRequest) GetDeviceIds() []string {
	if x != nil {
		return x.DeviceIds
	}
	return nil
}

func (x *CreateScheduledTaskRequest) GetConsignmentId() string {
	if x != nil {
		return x.ConsignmentId
	}
	return ""
}

func (x *CreateScheduledTaskRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateScheduledTaskRequest) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *CreateScheduledTaskRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *CreateScheduledTaskRequest) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *CreateScheduledTaskRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type CreateScheduledTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version information for the response message.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The number of tasks that were scheduled after processing the request.
	TaskCount uint32 `protobuf:"varint,2,opt,name=task_count,json=taskCount,proto3" json:"task_count,omitempty"`
	// The number of errors encountered while processing the request.
	ErrorCount uint32 `protobuf:"varint,3,opt,name=error_count,json=errorCount,proto3" json:"error_count,omitempty"`
	// The consignment ID is a unique identifier assigned by the requesting service
	// (service_id) for this task request. After submitting the scheduled task
	// request to the scheduler, the service can subsequently query for status
	// updates using this consignment ID.
	ConsignmentId string `protobuf:"bytes,4,opt,name=consignment_id,json=consignmentId,proto3" json:"consignment_id,omitempty"`
	// The tenant to which the devices specified in 'device_ids' belongs. All
	// devices specified in a single TaskRequestEnvelope using the device_ids
	// field MUST belong to the same tenant.
	TenantId string `protobuf:"bytes,5,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// Returns information about the task scheduled for each device specified in
	// the incoming request. Any devices missing from the original request would
	// have encountered failures and the error_count field shows the number of
	// devices for which such errors were encountered.
	TasksScheduled []*TaskInfo `protobuf:"bytes,6,rep,name=tasks_scheduled,json=tasksScheduled,proto3" json:"tasks_scheduled,omitempty"`
}

func (x *CreateScheduledTaskResponse) Reset() {
	*x = CreateScheduledTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduled_task_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateScheduledTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateScheduledTaskResponse) ProtoMessage() {}

func (x *CreateScheduledTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_scheduled_task_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateScheduledTaskResponse.ProtoReflect.Descriptor instead.
func (*CreateScheduledTaskResponse) Descriptor() ([]byte, []int) {
	return file_scheduled_task_proto_rawDescGZIP(), []int{1}
}

func (x *CreateScheduledTaskResponse) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CreateScheduledTaskResponse) GetTaskCount() uint32 {
	if x != nil {
		return x.TaskCount
	}
	return 0
}

func (x *CreateScheduledTaskResponse) GetErrorCount() uint32 {
	if x != nil {
		return x.ErrorCount
	}
	return 0
}

func (x *CreateScheduledTaskResponse) GetConsignmentId() string {
	if x != nil {
		return x.ConsignmentId
	}
	return ""
}

func (x *CreateScheduledTaskResponse) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *CreateScheduledTaskResponse) GetTasksScheduled() []*TaskInfo {
	if x != nil {
		return x.TasksScheduled
	}
	return nil
}

type TaskInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier for the task which was scheduled.
	TaskId string `protobuf:"bytes,1,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The unique identifier of the device to which the task is being dispatched.
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The current status of the task
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TaskInfo) Reset() {
	*x = TaskInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_scheduled_task_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskInfo) ProtoMessage() {}

func (x *TaskInfo) ProtoReflect() protoreflect.Message {
	mi := &file_scheduled_task_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskInfo.ProtoReflect.Descriptor instead.
func (*TaskInfo) Descriptor() ([]byte, []int) {
	return file_scheduled_task_proto_rawDescGZIP(), []int{2}
}

func (x *TaskInfo) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *TaskInfo) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *TaskInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_scheduled_task_proto protoreflect.FileDescriptor

var file_scheduled_task_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6b, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x6e, 0x2e,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x22, 0xb0, 0x02, 0x0a, 0x1a, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x73,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x81, 0x02, 0x0a,
	0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64,
	0x22, 0x58, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x0a, 0x07,
	0x74, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x61, 0x7a, 0x63, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x68, 0x70, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_scheduled_task_proto_rawDescOnce sync.Once
	file_scheduled_task_proto_rawDescData = file_scheduled_task_proto_rawDesc
)

func file_scheduled_task_proto_rawDescGZIP() []byte {
	file_scheduled_task_proto_rawDescOnce.Do(func() {
		file_scheduled_task_proto_rawDescData = protoimpl.X.CompressGZIP(file_scheduled_task_proto_rawDescData)
	})
	return file_scheduled_task_proto_rawDescData
}

var file_scheduled_task_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_scheduled_task_proto_goTypes = []interface{}{
	(*CreateScheduledTaskRequest)(nil),  // 0: krypton.scheduler.CreateScheduledTaskRequest
	(*CreateScheduledTaskResponse)(nil), // 1: krypton.scheduler.CreateScheduledTaskResponse
	(*TaskInfo)(nil),                    // 2: krypton.scheduler.TaskInfo
}
var file_scheduled_task_proto_depIdxs = []int32{
	2, // 0: krypton.scheduler.CreateScheduledTaskResponse.tasks_scheduled:type_name -> krypton.scheduler.TaskInfo
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_scheduled_task_proto_init() }
func file_scheduled_task_proto_init() {
	if File_scheduled_task_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_scheduled_task_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduledTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduled_task_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateScheduledTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_scheduled_task_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_scheduled_task_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_scheduled_task_proto_goTypes,
		DependencyIndexes: file_scheduled_task_proto_depIdxs,
		MessageInfos:      file_scheduled_task_proto_msgTypes,
	}.Build()
	File_scheduled_task_proto = out.File
	file_scheduled_task_proto_rawDesc = nil
	file_scheduled_task_proto_goTypes = nil
	file_scheduled_task_proto_depIdxs = nil
}
