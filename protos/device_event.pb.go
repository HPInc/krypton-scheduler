// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.8
// source: device_event.proto

package protos

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// DeviceEvent - defines the structure of an event published by the scheduler into
// the input queue of the device management service. This event is published when
// the scheduler receives a message from the device intended for the management
// service.
type DeviceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Version information for the device message envelope.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// Unique identifier of the service that had scheduled the task.
	ServiceId string `protobuf:"bytes,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// The unique identifier of the device to which the task was
	// dispatched.
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The tenant to which the device specified in 'device_id' belongs.
	TenantId string `protobuf:"bytes,4,opt,name=tenant_id,json=tenantId,proto3" json:"tenant_id,omitempty"`
	// The scheduled task identifier issued by the scheduler service for this task.
	//   - Messages sent by the service in response to a task issued by the device
	//     management service must specify the task ID of that task
	//   - If the device is sending the message of its own accord and not in the
	//     context of a task issued by its device management service, this field is
	//     not specified.
	TaskId string `protobuf:"bytes,5,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// The consignment ID is a unique identifier assigned by the requesting service
	// (service_id) for this task request. After submitting the scheduled task
	// request to the scheduler, the service can subsequently query for status
	// updates using this consignment ID.
	// This consignment ID is also used by the scheduler when logging activities
	// performed to service the scheduled task request. The consignment ID can be
	// used for end-to-end correlation and forensics for the request.
	ConsignmentId string `protobuf:"bytes,6,opt,name=consignment_id,json=consignmentId,proto3" json:"consignment_id,omitempty"`
	// The status of the task for which the task response is being sent by the
	// device. If the task_id is specified, this field must be specified as well.
	TaskStatus string `protobuf:"bytes,7,opt,name=task_status,json=taskStatus,proto3" json:"task_status,omitempty"`
	// An identifier assigned to the message sent to the device. This field is not
	// interpreted by the scheduler in any way and is passed on to the device. The
	// device returns this message_id back when responding to the cloud service.
	// This allows 'conversations' between the device management service and the
	// device as a way to keep messages belonging to a logical conversation together.
	MessageId string `protobuf:"bytes,8,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// The type of message contained within the payload. This is not interpreted
	// by the scheduler and is meant for consumption by the service initiating the
	// task request and the target device.
	MessageType string `protobuf:"bytes,9,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	// /////////////////////////// Payload ///////////////////////////////////////
	// The payload to be delivered to the target service. The payload is opaque
	// to the scheduler and is not interpreted in any way.
	Payload []byte `protobuf:"bytes,10,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *DeviceEvent) Reset() {
	*x = DeviceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_device_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent) ProtoMessage() {}

func (x *DeviceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_device_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent.ProtoReflect.Descriptor instead.
func (*DeviceEvent) Descriptor() ([]byte, []int) {
	return file_device_event_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceEvent) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *DeviceEvent) GetServiceId() string {
	if x != nil {
		return x.ServiceId
	}
	return ""
}

func (x *DeviceEvent) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *DeviceEvent) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

func (x *DeviceEvent) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *DeviceEvent) GetConsignmentId() string {
	if x != nil {
		return x.ConsignmentId
	}
	return ""
}

func (x *DeviceEvent) GetTaskStatus() string {
	if x != nil {
		return x.TaskStatus
	}
	return ""
}

func (x *DeviceEvent) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *DeviceEvent) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *DeviceEvent) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

var File_device_event_proto protoreflect.FileDescriptor

var file_device_event_proto_rawDesc = []byte{
	0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6b, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x6e, 0x2e, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x22, 0xbd, 0x02, 0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x61, 0x7a, 0x63, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x68, 0x70, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6b, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x6e, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_device_event_proto_rawDescOnce sync.Once
	file_device_event_proto_rawDescData = file_device_event_proto_rawDesc
)

func file_device_event_proto_rawDescGZIP() []byte {
	file_device_event_proto_rawDescOnce.Do(func() {
		file_device_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_device_event_proto_rawDescData)
	})
	return file_device_event_proto_rawDescData
}

var file_device_event_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_device_event_proto_goTypes = []interface{}{
	(*DeviceEvent)(nil), // 0: krypton.scheduler.DeviceEvent
}
var file_device_event_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_device_event_proto_init() }
func file_device_event_proto_init() {
	if File_device_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_device_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_device_event_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_device_event_proto_goTypes,
		DependencyIndexes: file_device_event_proto_depIdxs,
		MessageInfos:      file_device_event_proto_msgTypes,
	}.Build()
	File_device_event_proto = out.File
	file_device_event_proto_rawDesc = nil
	file_device_event_proto_goTypes = nil
	file_device_event_proto_depIdxs = nil
}
