// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.2
// source: dsts.proto

package dstsprotos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DeviceSTS_CreateDevice_FullMethodName                  = "/krypton.dsts.DeviceSTS/CreateDevice"
	DeviceSTS_GetDevice_FullMethodName                     = "/krypton.dsts.DeviceSTS/GetDevice"
	DeviceSTS_ListDevices_FullMethodName                   = "/krypton.dsts.DeviceSTS/ListDevices"
	DeviceSTS_UpdateDevice_FullMethodName                  = "/krypton.dsts.DeviceSTS/UpdateDevice"
	DeviceSTS_DeleteDevice_FullMethodName                  = "/krypton.dsts.DeviceSTS/DeleteDevice"
	DeviceSTS_GetSigningKey_FullMethodName                 = "/krypton.dsts.DeviceSTS/GetSigningKey"
	DeviceSTS_CreateEnrollmentToken_FullMethodName         = "/krypton.dsts.DeviceSTS/CreateEnrollmentToken"
	DeviceSTS_GetEnrollmentToken_FullMethodName            = "/krypton.dsts.DeviceSTS/GetEnrollmentToken"
	DeviceSTS_DeleteEnrollmentToken_FullMethodName         = "/krypton.dsts.DeviceSTS/DeleteEnrollmentToken"
	DeviceSTS_ValidateEnrollmentToken_FullMethodName       = "/krypton.dsts.DeviceSTS/ValidateEnrollmentToken"
	DeviceSTS_Ping_FullMethodName                          = "/krypton.dsts.DeviceSTS/Ping"
	DeviceSTS_GetAppAuthenticationChallenge_FullMethodName = "/krypton.dsts.DeviceSTS/GetAppAuthenticationChallenge"
	DeviceSTS_AuthenticateApp_FullMethodName               = "/krypton.dsts.DeviceSTS/AuthenticateApp"
)

// DeviceSTSClient is the client API for DeviceSTS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceSTSClient interface {
	// Device lifecycle management RPCs.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error)
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error)
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error)
	// Device STS - token service RPCs.
	GetSigningKey(ctx context.Context, in *GetSigningKeyRequest, opts ...grpc.CallOption) (*GetSigningKeyResponse, error)
	CreateEnrollmentToken(ctx context.Context, in *CreateEnrollmentTokenRequest, opts ...grpc.CallOption) (*CreateEnrollmentTokenResponse, error)
	GetEnrollmentToken(ctx context.Context, in *GetEnrollmentTokenRequest, opts ...grpc.CallOption) (*GetEnrollmentTokenResponse, error)
	DeleteEnrollmentToken(ctx context.Context, in *DeleteEnrollmentTokenRequest, opts ...grpc.CallOption) (*DeleteEnrollmentTokenResponse, error)
	ValidateEnrollmentToken(ctx context.Context, in *ValidateEnrollmentTokenRequest, opts ...grpc.CallOption) (*ValidateEnrollmentTokenResponse, error)
	// Health check/uptime check RPC.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// App authentication RPCs.
	GetAppAuthenticationChallenge(ctx context.Context, in *AppAuthenticationChallengeRequest, opts ...grpc.CallOption) (*AppAuthenticationChallengeResponse, error)
	AuthenticateApp(ctx context.Context, in *AppAuthenticationRequest, opts ...grpc.CallOption) (*AppAuthenticationResponse, error)
}

type deviceSTSClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceSTSClient(cc grpc.ClientConnInterface) DeviceSTSClient {
	return &deviceSTSClient{cc}
}

func (c *deviceSTSClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*CreateDeviceResponse, error) {
	out := new(CreateDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_CreateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_ListDevices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*UpdateDeviceResponse, error) {
	out := new(UpdateDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_UpdateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*DeleteDeviceResponse, error) {
	out := new(DeleteDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_DeleteDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) GetSigningKey(ctx context.Context, in *GetSigningKeyRequest, opts ...grpc.CallOption) (*GetSigningKeyResponse, error) {
	out := new(GetSigningKeyResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_GetSigningKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) CreateEnrollmentToken(ctx context.Context, in *CreateEnrollmentTokenRequest, opts ...grpc.CallOption) (*CreateEnrollmentTokenResponse, error) {
	out := new(CreateEnrollmentTokenResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_CreateEnrollmentToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) GetEnrollmentToken(ctx context.Context, in *GetEnrollmentTokenRequest, opts ...grpc.CallOption) (*GetEnrollmentTokenResponse, error) {
	out := new(GetEnrollmentTokenResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_GetEnrollmentToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) DeleteEnrollmentToken(ctx context.Context, in *DeleteEnrollmentTokenRequest, opts ...grpc.CallOption) (*DeleteEnrollmentTokenResponse, error) {
	out := new(DeleteEnrollmentTokenResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_DeleteEnrollmentToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) ValidateEnrollmentToken(ctx context.Context, in *ValidateEnrollmentTokenRequest, opts ...grpc.CallOption) (*ValidateEnrollmentTokenResponse, error) {
	out := new(ValidateEnrollmentTokenResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_ValidateEnrollmentToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) GetAppAuthenticationChallenge(ctx context.Context, in *AppAuthenticationChallengeRequest, opts ...grpc.CallOption) (*AppAuthenticationChallengeResponse, error) {
	out := new(AppAuthenticationChallengeResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_GetAppAuthenticationChallenge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceSTSClient) AuthenticateApp(ctx context.Context, in *AppAuthenticationRequest, opts ...grpc.CallOption) (*AppAuthenticationResponse, error) {
	out := new(AppAuthenticationResponse)
	err := c.cc.Invoke(ctx, DeviceSTS_AuthenticateApp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceSTSServer is the server API for DeviceSTS service.
// All implementations must embed UnimplementedDeviceSTSServer
// for forward compatibility
type DeviceSTSServer interface {
	// Device lifecycle management RPCs.
	CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error)
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error)
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error)
	// Device STS - token service RPCs.
	GetSigningKey(context.Context, *GetSigningKeyRequest) (*GetSigningKeyResponse, error)
	CreateEnrollmentToken(context.Context, *CreateEnrollmentTokenRequest) (*CreateEnrollmentTokenResponse, error)
	GetEnrollmentToken(context.Context, *GetEnrollmentTokenRequest) (*GetEnrollmentTokenResponse, error)
	DeleteEnrollmentToken(context.Context, *DeleteEnrollmentTokenRequest) (*DeleteEnrollmentTokenResponse, error)
	ValidateEnrollmentToken(context.Context, *ValidateEnrollmentTokenRequest) (*ValidateEnrollmentTokenResponse, error)
	// Health check/uptime check RPC.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// App authentication RPCs.
	GetAppAuthenticationChallenge(context.Context, *AppAuthenticationChallengeRequest) (*AppAuthenticationChallengeResponse, error)
	AuthenticateApp(context.Context, *AppAuthenticationRequest) (*AppAuthenticationResponse, error)
	mustEmbedUnimplementedDeviceSTSServer()
}

// UnimplementedDeviceSTSServer must be embedded to have forward compatible implementations.
type UnimplementedDeviceSTSServer struct {
}

func (UnimplementedDeviceSTSServer) CreateDevice(context.Context, *CreateDeviceRequest) (*CreateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedDeviceSTSServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceSTSServer) ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedDeviceSTSServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*UpdateDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedDeviceSTSServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*DeleteDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedDeviceSTSServer) GetSigningKey(context.Context, *GetSigningKeyRequest) (*GetSigningKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSigningKey not implemented")
}
func (UnimplementedDeviceSTSServer) CreateEnrollmentToken(context.Context, *CreateEnrollmentTokenRequest) (*CreateEnrollmentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEnrollmentToken not implemented")
}
func (UnimplementedDeviceSTSServer) GetEnrollmentToken(context.Context, *GetEnrollmentTokenRequest) (*GetEnrollmentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEnrollmentToken not implemented")
}
func (UnimplementedDeviceSTSServer) DeleteEnrollmentToken(context.Context, *DeleteEnrollmentTokenRequest) (*DeleteEnrollmentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEnrollmentToken not implemented")
}
func (UnimplementedDeviceSTSServer) ValidateEnrollmentToken(context.Context, *ValidateEnrollmentTokenRequest) (*ValidateEnrollmentTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateEnrollmentToken not implemented")
}
func (UnimplementedDeviceSTSServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDeviceSTSServer) GetAppAuthenticationChallenge(context.Context, *AppAuthenticationChallengeRequest) (*AppAuthenticationChallengeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppAuthenticationChallenge not implemented")
}
func (UnimplementedDeviceSTSServer) AuthenticateApp(context.Context, *AppAuthenticationRequest) (*AppAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateApp not implemented")
}
func (UnimplementedDeviceSTSServer) mustEmbedUnimplementedDeviceSTSServer() {}

// UnsafeDeviceSTSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceSTSServer will
// result in compilation errors.
type UnsafeDeviceSTSServer interface {
	mustEmbedUnimplementedDeviceSTSServer()
}

func RegisterDeviceSTSServer(s grpc.ServiceRegistrar, srv DeviceSTSServer) {
	s.RegisterService(&DeviceSTS_ServiceDesc, srv)
}

func _DeviceSTS_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_ListDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_GetSigningKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSigningKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).GetSigningKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_GetSigningKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).GetSigningKey(ctx, req.(*GetSigningKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_CreateEnrollmentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnrollmentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).CreateEnrollmentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_CreateEnrollmentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).CreateEnrollmentToken(ctx, req.(*CreateEnrollmentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_GetEnrollmentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEnrollmentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).GetEnrollmentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_GetEnrollmentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).GetEnrollmentToken(ctx, req.(*GetEnrollmentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_DeleteEnrollmentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnrollmentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).DeleteEnrollmentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_DeleteEnrollmentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).DeleteEnrollmentToken(ctx, req.(*DeleteEnrollmentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_ValidateEnrollmentToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateEnrollmentTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).ValidateEnrollmentToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_ValidateEnrollmentToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).ValidateEnrollmentToken(ctx, req.(*ValidateEnrollmentTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_GetAppAuthenticationChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAuthenticationChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).GetAppAuthenticationChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_GetAppAuthenticationChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).GetAppAuthenticationChallenge(ctx, req.(*AppAuthenticationChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceSTS_AuthenticateApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceSTSServer).AuthenticateApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceSTS_AuthenticateApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceSTSServer).AuthenticateApp(ctx, req.(*AppAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceSTS_ServiceDesc is the grpc.ServiceDesc for DeviceSTS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceSTS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "krypton.dsts.DeviceSTS",
	HandlerType: (*DeviceSTSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDevice",
			Handler:    _DeviceSTS_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _DeviceSTS_GetDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _DeviceSTS_ListDevices_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _DeviceSTS_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _DeviceSTS_DeleteDevice_Handler,
		},
		{
			MethodName: "GetSigningKey",
			Handler:    _DeviceSTS_GetSigningKey_Handler,
		},
		{
			MethodName: "CreateEnrollmentToken",
			Handler:    _DeviceSTS_CreateEnrollmentToken_Handler,
		},
		{
			MethodName: "GetEnrollmentToken",
			Handler:    _DeviceSTS_GetEnrollmentToken_Handler,
		},
		{
			MethodName: "DeleteEnrollmentToken",
			Handler:    _DeviceSTS_DeleteEnrollmentToken_Handler,
		},
		{
			MethodName: "ValidateEnrollmentToken",
			Handler:    _DeviceSTS_ValidateEnrollmentToken_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DeviceSTS_Ping_Handler,
		},
		{
			MethodName: "GetAppAuthenticationChallenge",
			Handler:    _DeviceSTS_GetAppAuthenticationChallenge_Handler,
		},
		{
			MethodName: "AuthenticateApp",
			Handler:    _DeviceSTS_AuthenticateApp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsts.proto",
}
